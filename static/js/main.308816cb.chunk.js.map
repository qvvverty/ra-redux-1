{"version":3,"sources":["actions/actionTypes.js","actions/actionCreators.js","components/ServiceAdd.js","components/ServiceList.js","App.js","serviceWorker.js","reducers/serviceList.js","reducers/serviceAdd.js","store/index.js","index.js"],"names":["ADD_SERVICE","REMOVE_SERVICE","CHANGE_SERVICE_FIELD","RESET_SERVICE_FIELDS","EDIT_SERVICE","FILTER_SERVICES","changeServiceField","name","value","type","payload","resetServiceFields","ServiceAdd","item","useSelector","state","serviceAdd","dispatch","useDispatch","handleChange","evt","target","onSubmit","preventDefault","editingId","editedName","editedPrice","price","onChange","onClick","ServiceList","items","serviceList","handleRemove","id","removeService","filterString","actualServices","map","o","key","App","Boolean","window","location","hostname","match","initialState","services","nanoid","filteredServices","reducer","combineReducers","action","Number","filter","service","toLowerCase","includes","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.308816cb.chunk.js","sourcesContent":["export const ADD_SERVICE = 'ADD_SERVICE';\nexport const REMOVE_SERVICE = 'REMOVE_SERVICE';\nexport const CHANGE_SERVICE_FIELD = 'CHANGE_SERVICE_FIELD';\nexport const RESET_SERVICE_FIELDS = 'RESET_SERVICE_FIELDS';\nexport const EDIT_SERVICE = 'EDIT_SERVICE';\nexport const FILTER_SERVICES = 'FILTER_SERVICES';\n","import {\n  ADD_SERVICE,\n  REMOVE_SERVICE,\n  CHANGE_SERVICE_FIELD,\n  RESET_SERVICE_FIELDS,\n  EDIT_SERVICE,\n  FILTER_SERVICES\n} from './actionTypes';\n\nexport function addService(name, price) {\n  return {type: ADD_SERVICE, payload: {name, price}};\n}\n\nexport function removeService(id) {\n  return {type: REMOVE_SERVICE, payload: {id}};\n}\n\nexport function changeServiceField(name, value) {\n  return {type: CHANGE_SERVICE_FIELD, payload: {name, value}}\n}\n\nexport function resetServiceFields() {\n  return {type: RESET_SERVICE_FIELDS, payload: {}}\n}\n\nexport function editService(editingId, editedName, editedPrice) {\n  return {type: EDIT_SERVICE, payload: {editingId, editedName, editedPrice}}\n}\n\nexport function filterServices(filterString) {\n  return {type: FILTER_SERVICES, payload: {filterString}};\n}\n","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {changeServiceField, resetServiceFields, addService, editService} from '../actions/actionCreators';\n\nfunction ServiceAdd() {\n\tconst item = useSelector(state => state.serviceAdd);\n\tconst dispatch = useDispatch();\n\n\tconst handleChange = evt => {\n\t\tconst {name, value} = evt.target;\n\t\tdispatch(changeServiceField(name, value));\n\t}\n\n\tconst handleSubmit = evt => {\n\t\t\tevt.preventDefault();\n\n      if (item.editingId) {\n        dispatch(editService(item.editingId, item.name, item.price));\n        dispatch(resetServiceFields());\n        return;\n      }\n\n\t\t\tdispatch(addService(item.name, item.price));\n      dispatch(resetServiceFields());\n\t}\n\n  const handleCancel = evt => {\n    evt.preventDefault();\n    dispatch(resetServiceFields());\n  }\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input name='name' onChange={handleChange} value={item.name} />\n\t\t\t<input name='price' onChange={handleChange} value={item.price} />\n\t\t\t<button type='submit'>Save</button>\n      {item.editingId ? <button type=\"reset\" onClick={handleCancel}>Cancel</button> : null}\n\t\t</form>\n\t);\n}\n\nexport default ServiceAdd;\n","import React from 'react'\nimport {useSelector, useDispatch} from 'react-redux';\nimport {removeService, changeServiceField, filterServices} from '../actions/actionCreators';\n\nfunction ServiceList() {\n  const items = useSelector(state => state.serviceList);\n  const dispatch = useDispatch();\n\n  const handleNameFilter = evt => {\n    dispatch(filterServices(evt.target.value));\n  }\n\n  const handleEdit = (id, name, price) => {\n    dispatch(changeServiceField('editingId', id));\n    dispatch(changeServiceField('name', name));\n    dispatch(changeServiceField('price', price));\n  }\n\n  const handleRemove = id => {\n    dispatch(removeService(id));\n  }\n\n  return (\n    <>\n      <input name=\"filter\" onChange={handleNameFilter} /> Filter by name\n      <ul>\n        {items[items.actualServices].map(o => (\n          <li key={o.id}>\n            {o.name} {o.price}\n            <button onClick={() => handleEdit(o.id, o.name, o.price)}>✎</button>\n            <button onClick={() => handleRemove(o.id)}>✕</button>\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ServiceList\n","import React from 'react';\nimport ServiceAdd from './components/ServiceAdd';\nimport ServiceList from './components/ServiceList';\n// import ServiceAddClassBased from './components/ServiceAddClassBased';\n// import ServiceListClassBased from './components/ServiceListClassBased';\n\nfunction App() {\n  return (\n    <>\n      <ServiceAdd />\n      <ServiceList />\n      {/* <hr />\n      <ServiceAddClassBased />\n      <ServiceListClassBased /> */}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import nanoid from 'nanoid';\nimport {ADD_SERVICE, EDIT_SERVICE, REMOVE_SERVICE, FILTER_SERVICES} from '../actions/actionTypes'\n\nconst initialState = {\n  services: [\n    {id: nanoid(), name: 'Замена стекла', price: 21000},\n    {id: nanoid(), name: 'Замена дисплея', price: 25000}\n  ],\n  filteredServices: [],\n  actualServices: 'services'\n};\n\nexport default function serviceListReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_SERVICE:\n      const {name, price} = action.payload;\n      return {...state, services: [...state.services, {id: nanoid(), name, price: Number(price)}]};\n    case REMOVE_SERVICE:\n      const {id} = action.payload;\n      return {...state, services: state.services.filter(service => service.id !== id)};\n    case EDIT_SERVICE:\n      const {editingId, editedName, editedPrice} = action.payload;\n      return {\n        ...state,\n        services: state.services.map(service => {\n          return service.id === editingId ? {...service, name: editedName, price: editedPrice} : service;\n        })\n      };\n    case FILTER_SERVICES:\n      const {filterString} = action.payload;\n      if (!filterString) return {...state, actualServices: 'services'};\n      return {\n        ...state,\n        filteredServices: state.services.filter(service => service.name.toLowerCase().includes(filterString.toLowerCase())),\n        actualServices: 'filteredServices'\n      };\n    default:\n      return state;\n  }\n}\n","import {CHANGE_SERVICE_FIELD, RESET_SERVICE_FIELDS} from '../actions/actionTypes'\n\nconst initialState = {\n  name: '',\n  price: '',\n  editingId: '',\n};\n\nexport default function serviceAddReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_SERVICE_FIELD:\n      const {name, value} = action.payload;\n      return {...state, [name]: value};\n    case RESET_SERVICE_FIELDS:\n      return initialState;\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport serviceListReducer from '../reducers/serviceList';\nimport serviceAddReducer from '../reducers/serviceAdd';\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceAdd: serviceAddReducer,\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}